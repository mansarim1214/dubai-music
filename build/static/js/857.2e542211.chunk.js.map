{"version":3,"file":"static/js/857.2e542211.chunk.js","mappings":"8MAUAA,EAAAA,GAAKC,eAAeC,EAAAA,GAEpB,MAqSA,EArSkBC,IAAqB,IAApB,WAAEC,GAAYD,EAC/B,MAAOE,EAAYC,IAAiBC,EAAAA,EAAAA,UAAS,KACtCC,EAAmBC,IAAwBF,EAAAA,EAAAA,UAAS,CAAC,IACrDG,EAAWC,IAAgBJ,EAAAA,EAAAA,UAAS,KACpCK,EAAYC,IAAiBN,EAAAA,EAAAA,UAAS,CAAEO,MAAM,EAAOC,OAAO,IAC7DC,GAAeC,EAAAA,EAAAA,QAAO,KACrBC,EAASC,IAAcZ,EAAAA,EAAAA,WAAS,IAKxCa,EAAAA,EAAAA,YAAU,KACWC,WAChB,MAAMC,EAAoB,CACxBC,QAAS,CAAC,kBAAmB,gBAAiB,aAAc,cAAe,cAAe,qBAAsB,gBAAiB,sBAAuB,iBAAkB,iBAAkB,YAAa,kBACzMC,GAAI,CAAC,QAAS,QAAS,aAAc,UAAW,YAAa,aAC7DC,UAAW,CAAC,aAAc,mBAAoB,oBAAqB,iBAAkB,mBAAoB,qBACzGC,SAAU,CAAC,gCAA4B,iBAAkB,oBAAqB,oBAAqB,kBAAmB,kBAAmB,eAG3I,IACEP,GAAW,GAEX,IAAIQ,SAD6BC,EAAAA,EAAMC,IAAI,8CACAC,KAG3C,IAAIC,SAD0BH,EAAAA,EAAMC,IAAI,2CACHC,KAAKE,QAAOC,GAAiC,cAAvBA,EAAOC,cAGlE,MAAMC,EAAkBC,KAAKC,MAAMC,aAAaC,QAAQ,eAAiB,GAGnEC,EAAgBC,GAAUA,EAAMC,MAAK,IAAMC,KAAKC,SAAW,KAG3DC,EAAcP,aAAaC,QAAQ,eAGzC,IAAIO,EAAmBnB,EAAkBe,MAAK,CAACK,EAAGC,IACjC,aAAXD,EAAEE,MAA6B,EACpB,aAAXD,EAAEC,KAA4B,EAC3B,IAIT,IAAKJ,EAAa,CAChB,MAAMK,EAAsBJ,EAAiBd,QAAOmB,GAAoB,aAAbA,EAAIF,OAC/DH,EAAmB,CACjBA,EAAiBM,MAAKD,GAAoB,aAAbA,EAAIF,UAC9BT,EAAaU,IAElBZ,aAAae,QAAQ,cAAe,OACtC,CAGA,MAAMC,EAAiB,CAAC,EACxBR,EAAiBS,SAAQC,IACvB,IAAIC,EAAgB1B,EAAeC,QAAOC,GAAUA,EAAOuB,WAAaA,EAASP,OAAMS,KAAIzB,IAAM,IAC5FA,EACH0B,WAAYxB,EAAgByB,MAAKC,GAAOA,EAAIC,MAAQ7B,EAAO6B,UAIvC,aAAlBN,EAASP,KACXQ,EAAgBA,EAAcf,MAAK,CAACK,EAAGC,IAAM1B,EAA4B,SAAEyC,QAAQhB,EAAEiB,OAAS1C,EAA4B,SAAEyC,QAAQf,EAAEgB,SAC5HnB,IACVY,EAAgBjB,EAAaiB,IAG/BH,EAAeE,EAASP,MAAQQ,CAAa,IAG/CnD,EAAcwC,GACdrC,EAAqB6C,GACrB3C,EAAawB,EACf,CAAE,MAAO8B,GACPC,QAAQD,MAAM,uBAAwBA,EACxC,CAAC,QACC9C,GAAW,EACb,GAGFgD,EAAW,GACV,KAMH/C,EAAAA,EAAAA,YAAU,KACR,GAAIJ,EAAaoD,QAAQC,OAAS,EAAG,CACnC,MAAMC,EAAwBA,KAC5BtD,EAAaoD,QAAQb,SAAQ,CAACgB,EAAUC,KACtC,GAAID,EAAU,CACZ,MAAME,EAAcF,EAASE,YACvBC,EAAcH,EAASG,YACvBC,EAAaJ,EAASI,WAE5B9D,GAAe+D,IAAI,IACdA,EACH,CAACJ,GAAQ,CACP1D,KAAM6D,EAAa,EACnB5D,MAAO4D,EAAaF,EAAcC,MAGxC,IACA,EAMJ,OAHAJ,IAEAO,OAAOC,iBAAiB,SAAUR,GAC3B,IAAMO,OAAOE,oBAAoB,SAAUT,EACpD,IACC,CAAC9D,EAAmBE,KAEvBU,EAAAA,EAAAA,YAAU,KACJyD,OAAOG,YAAc,KAAOhE,EAAaoD,QAAQC,OAAS,GAC5DrD,EAAaoD,QAAQb,SAASgB,IACxBA,IACFvE,EAAAA,GAAKiF,aAAaV,GAElBrE,EAAAA,EAAUgF,OAAOX,EAAU,CACzBY,KAAM,IACNC,OAAQ,CACNC,MAAOd,EAASE,YAAcF,EAASG,YACvCY,KAAM,GAERC,SAAS,EACTC,YAAY,EACZC,eAAgB,IAChBC,cAAeA,KACb1F,EAAAA,GAAK2F,GAAGpB,EAAU,CAAEqB,EAAGrB,EAASsB,MAAMD,EAAGE,KAAM,cAAe,EAEhEC,KAAM,CACJH,EAAII,GAAsC,IAA5BrD,KAAKsD,MAAMD,EAAQ,UAGvC,GAEJ,GACC,CAACxF,EAAmBE,IAEvB,MAmBMiD,EAAc1B,GACXvB,EAAUkD,MAAMC,GAAQA,EAAIC,MAAQ7B,EAAO6B,MAG9CoC,EAAiBA,CAACC,EAAW3B,KACjC,MAAMD,EAAWvD,EAAaoD,QAAQI,GACtC,GAAID,EAAU,CAEZ,MACM6B,EAA4B,GADf7B,EAASG,YAAc,GACJyB,EAEtC5B,EAAS8B,SAAS,CAChBvF,KAAMsF,EACNE,SAAU,WAGZC,YAAW,KACT,MAAM9B,EAAcF,EAASE,YACvBC,EAAcH,EAASG,YACvBC,EAAaJ,EAASI,WAE5B9D,GAAe+D,IAAI,IACdA,EACH,CAACJ,GAAQ,CACP1D,KAAM6D,EAAa,EACnB5D,MAAO4D,EAAaF,EAAcC,MAEnC,GACF,IACL,GASF,OACE8B,EAAAA,EAAAA,KAAA,OAAKC,UAAU,YAAWC,UAExBF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,sBAAqBC,SAGjCrG,EACE2B,QACEwB,GACChD,EAAkBgD,EAASP,OAC3BzC,EAAkBgD,EAASP,MAAMoB,OAAS,IAE7CX,KAAI,CAACF,EAAUgB,KAAK,IAAAmC,EAAAC,EAAAC,EAAA,OACnBC,EAAAA,EAAAA,MAAA,WAA4BL,UAAU,aAAaM,GAAG,YAAWL,SAAA,EAC/DI,EAAAA,EAAAA,MAAA,OAAKL,UAAU,YAAWC,SAAA,EACxBF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,SAAQC,SAAElD,EAASP,QAEjCuD,EAAAA,EAAAA,KAAA,aAEgB,QAAjBG,EAAA/F,EAAW4D,UAAM,IAAAmC,OAAA,EAAjBA,EAAmB7F,QAClB0F,EAAAA,EAAAA,KAAA,UACEC,UAAU,4CACVO,QAASA,IAAMd,GAAgB,EAAG1B,GAAQkC,UAE1CF,EAAAA,EAAAA,KAACS,EAAAA,qBAAoB,OAGzBT,EAAAA,EAAAA,KAAA,OACEC,UAAU,2BACVS,IAAMC,GAAQnG,EAAaoD,QAAQI,GAAS2C,EAC5CC,MAAO,CACLC,QAAS,OACTC,SAAU,SACVC,MAAO,QACPb,SAE+B,QAF/BE,EAEDpG,EAAkBgD,EAASP,aAAK,IAAA2D,OAAA,EAAhCA,EAAkClD,KAAKzB,IACtC6E,EAAAA,EAAAA,MAAA,OAEEL,UAAU,cACVW,MAAO,CACLI,KAAM,aACNC,UAAW,aACXC,QAAS,SAEXV,QAAUW,GAnDP1F,KACf7B,GACFA,EAAW,WAAW6B,EAAO6B,MAC/B,EAgDoC8D,CAAY3F,GAAeyE,SAAA,EAE/CI,EAAAA,EAAAA,MAAA,OAAKL,UAAU,cAAaC,SAAA,CACzBzE,EAAO4F,WACNrB,EAAAA,EAAAA,KAAA,OACEsB,IAAK,8BAAoC7F,EAAO4F,WAChDE,IAAK9F,EAAO+B,MACZuD,MAAM,UAGVf,EAAAA,EAAAA,KAAA,OAAKC,UAAU,aAAYC,UACzBF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,WAAUC,SAAEzE,EAAO+B,cAKrCwC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,eAAcC,UAC3BF,EAAAA,EAAAA,KAAA,UACEQ,QAAUW,IACRA,EAAMK,kBAzHN/F,KAEtB,MAAMgG,EAAiB7F,KAAKC,MAAMC,aAAaC,QAAQ,eAAiB,GAQlE2F,EALoBD,EAAerE,MACtCC,GAAQA,EAAIC,MAAQ7B,EAAO6B,MAK1BmE,EAAejG,QAAQ6B,GAAQA,EAAIC,MAAQ7B,EAAO6B,MAClD,IAAImE,EAAgBhG,GAGxBtB,EAAauH,GACb5F,aAAae,QAAQ,YAAajB,KAAK+F,UAAUD,GAAkB,EA0G7CE,CAAenG,EAAO,EACtByE,SAED/C,EAAW1B,IACVuE,EAAAA,EAAAA,KAAC6B,EAAAA,YAAW,CAAC5B,UAAU,eAEvBD,EAAAA,EAAAA,KAAC6B,EAAAA,YAAW,CAAC5B,UAAU,oBAjCxBxE,EAAO6B,UAwCA,QAAjB+C,EAAAjG,EAAW4D,UAAM,IAAAqC,OAAA,EAAjBA,EAAmB9F,SAClByF,EAAAA,EAAAA,KAAA,UACEC,UAAU,6CACVO,QAASA,IAAMd,EAAe,EAAG1B,GAAQkC,UAEzCF,EAAAA,EAAAA,KAAC8B,EAAAA,sBAAqB,QAtEd9E,EAASM,IAyEb,OAGZ,C","sources":["components/View/Musicians.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { BsHeartFill } from \"react-icons/bs\";\nimport { BsChevronCompactRight, BsChevronCompactLeft } from \"react-icons/bs\";\nimport { gsap } from \"gsap\";\nimport { Draggable } from \"gsap/Draggable\";\nimport axios from \"axios\";\nimport \"./frontend.css\";\n\n\ngsap.registerPlugin(Draggable);\n\nconst Musicians = ({ onNavigate }) => {\n  const [categories, setCategories] = useState([]);\n  const [artistsByCategory, setArtistsByCategory] = useState({});\n  const [favorites, setFavorites] = useState([]);\n  const [showArrows, setShowArrows] = useState({ left: false, right: false });\n  const carouselRefs = useRef([]);\n  const [loading, setLoading] = useState(true);\n\n\n\n\n useEffect(() => {\n    const fetchData = async () => {\n      const manualArtistOrder = {\n        Singers: [\"Jerome Deligero\", \"Emily Peacock\", \"Toi Dupras\", \"Yvonne Park\", \"Matt Palmer\", \"Lina Ammor- Jevtic\", \"Eirini Devitt\", \"Juan Pablo Pellicer\", \"Nick Pritchard\", \"Mostafa Sattar\", \"Jin Flora\", \"Robbi McFaulds\"],\n        DJ: [\"Dadou\", \"Elena\", \"Yana Kulyk\", \"Raphy J\", \"DJ Stylez\", \"DJ Melyna\"],\n        Musicians: [\"Ksenia Kot\", \"Jose Ramon Nunez\", \"Soren Lyng Hansen\", \"Tatiana Durova\", \"Aleksandra Dudek\", \"Ulyana Goncharova\"],\n        Trending: [\"Carrie Gibsonâ€™s NuvoSoul\", \"Jaymie Deville\", \"Chelsey Chantelle\", \"Golden Collective\", \"Abdallah Seleem\", \"Dany Echemendia\", \"Marvin Lee\"],\n      };\n  \n      try {\n        setLoading(true);\n        const categoriesResponse = await axios.get(`${process.env.REACT_APP_API_URL}/api/categories`);\n        let fetchedCategories = categoriesResponse.data;\n  \n        const artistsResponse = await axios.get(`${process.env.REACT_APP_API_URL}/api/artists`);\n        let fetchedArtists = artistsResponse.data.filter(artist => artist.isPublished === \"published\");\n  \n        // Load favorites from localStorage\n        const storedFavorites = JSON.parse(localStorage.getItem(\"favorites\")) || [];\n        \n        // Define shuffle function\n        const shuffleArray = (array) => array.sort(() => Math.random() - 0.5);\n  \n        // Check if shuffle has already happened\n        const hasShuffled = localStorage.getItem(\"hasShuffled\");\n  \n        // Define the desired order with Trending fixed at the top\n        let sortedCategories = fetchedCategories.sort((a, b) => {\n          if (a.name === \"Trending\") return -1;\n          if (b.name === \"Trending\") return 1;\n          return 0;\n        });\n  \n        // Shuffle categories except Trending **only once**\n        if (!hasShuffled) {\n          const categoriesToShuffle = sortedCategories.filter(cat => cat.name !== \"Trending\");\n          sortedCategories = [\n            sortedCategories.find(cat => cat.name === \"Trending\"),\n            ...shuffleArray(categoriesToShuffle)\n          ];\n          localStorage.setItem(\"hasShuffled\", \"true\"); // Mark shuffle as done\n        }\n  \n        // Group and shuffle artists within categories\n        const groupedArtists = {};\n        sortedCategories.forEach(category => {\n          let sortedArtists = fetchedArtists.filter(artist => artist.category === category.name).map(artist => ({\n            ...artist,\n            isFavorite: storedFavorites.some(fav => fav._id === artist._id),\n          }));\n  \n          // Keep manual sorting for Trending\n          if (category.name === \"Trending\") {\n            sortedArtists = sortedArtists.sort((a, b) => manualArtistOrder[\"Trending\"].indexOf(a.title) - manualArtistOrder[\"Trending\"].indexOf(b.title));\n          } else if (!hasShuffled) {\n            sortedArtists = shuffleArray(sortedArtists);\n          }\n  \n          groupedArtists[category.name] = sortedArtists;\n        });\n  \n        setCategories(sortedCategories);\n        setArtistsByCategory(groupedArtists);\n        setFavorites(storedFavorites);\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n  \n    fetchData();\n  }, []);\n\n\n\n\n\n  useEffect(() => {\n    if (carouselRefs.current.length > 0) {\n      const updateArrowVisibility = () => {\n        carouselRefs.current.forEach((carousel, index) => {\n          if (carousel) {\n            const scrollWidth = carousel.scrollWidth;\n            const clientWidth = carousel.clientWidth;\n            const scrollLeft = carousel.scrollLeft;\n\n            setShowArrows((prev) => ({\n              ...prev,\n              [index]: {\n                left: scrollLeft > 0,\n                right: scrollLeft < scrollWidth - clientWidth,\n              },\n            }));\n          }\n        });\n      };\n\n      updateArrowVisibility(); // Initial check\n\n      window.addEventListener(\"resize\", updateArrowVisibility);\n      return () => window.removeEventListener(\"resize\", updateArrowVisibility);\n    }\n  }, [artistsByCategory, favorites]);\n\n  useEffect(() => {\n    if (window.innerWidth <= 500 && carouselRefs.current.length > 0) {\n      carouselRefs.current.forEach((carousel) => {\n        if (carousel) {\n          gsap.killTweensOf(carousel);\n\n          Draggable.create(carousel, {\n            type: \"x\",\n            bounds: {\n              minX: -carousel.scrollWidth + carousel.clientWidth,\n              maxX: 0,\n            },\n            inertia: true,\n            throwProps: true,\n            edgeResistance: 0.65,\n            onThrowUpdate: () => {\n              gsap.to(carousel, { x: carousel._gsap.x, ease: \"power2.out\" });\n            },\n            snap: {\n              x: (value) => Math.round(value / 16.67) * 200, // Adjust based on item width\n            },\n          });\n        }\n      });\n    }\n  }, [artistsByCategory, favorites]);\n\n  const toggleFavorite = (artist) => {\n    // Get the current favorites from localStorage\n    const savedFavorites = JSON.parse(localStorage.getItem(\"favorites\")) || [];\n\n    // Check if the artist is already in favorites\n    const isAlreadyFavorite = savedFavorites.some(\n      (fav) => fav._id === artist._id\n    );\n\n    // Update favorites based on whether the artist is already a favorite\n    const updatedFavorites = isAlreadyFavorite\n      ? savedFavorites.filter((fav) => fav._id !== artist._id)\n      : [...savedFavorites, artist];\n\n    // Update state and localStorage\n    setFavorites(updatedFavorites);\n    localStorage.setItem(\"favorites\", JSON.stringify(updatedFavorites));\n  };\n\n  const isFavorite = (artist) => {\n    return favorites.some((fav) => fav._id === artist._id);\n  };\n\n  const scrollCarousel = (direction, index) => {\n    const carousel = carouselRefs.current[index];\n    if (carousel) {\n      // Assuming each slide is 16.67% of the carousel width\n      const slideWidth = carousel.clientWidth / 6; // Adjust the denominator based on the number of visible slides\n      const scrollAmount = slideWidth * 3 * direction; // Scroll by 3 slides\n\n      carousel.scrollBy({\n        left: scrollAmount,\n        behavior: \"smooth\",\n      });\n\n      setTimeout(() => {\n        const scrollWidth = carousel.scrollWidth;\n        const clientWidth = carousel.clientWidth;\n        const scrollLeft = carousel.scrollLeft;\n\n        setShowArrows((prev) => ({\n          ...prev,\n          [index]: {\n            left: scrollLeft > 0,\n            right: scrollLeft < scrollWidth - clientWidth,\n          },\n        }));\n      }, 500); // Delay to allow smooth scrolling to update visibility\n    }\n  };\n\n  const handleClick = (artist) => {\n    if (onNavigate) {\n      onNavigate(`/artist/${artist._id}`);\n    }\n  };\n\n  return (\n    <div className=\"mainFront\">\n\n      <div className=\"container-fluid p-0\" >\n\n\n        {categories\n          .filter(\n            (category) =>\n              artistsByCategory[category.name] &&\n              artistsByCategory[category.name].length > 0\n          )\n          .map((category, index) => (\n            <section key={category._id} className=\"artSection\" id=\"musicians\">\n              <div className=\"div mb-2 \">\n                <h2 className=\"artCat\">{category.name}</h2>\n\n                <hr></hr>\n              </div>\n              {showArrows[index]?.left && (\n                <button\n                  className=\"arrow left react-multiple-carousel__arrow\"\n                  onClick={() => scrollCarousel(-1, index)} // Scroll left\n                >\n                  <BsChevronCompactLeft />\n                </button>\n              )}\n              <div\n                className=\"artistCarousel px-3 mb-2\"\n                ref={(el) => (carouselRefs.current[index] = el)}\n                style={{\n                  display: \"flex\",\n                  overflow: \"hidden\",\n                  width: \"100%\",\n                }}\n              >\n                {artistsByCategory[category.name]?.map((artist) => (\n                  <div\n                    key={artist._id}\n                    className=\"artistImage\"\n                    style={{\n                      flex: \"0 0 16.67%\",\n                      boxSizing: \"border-box\",\n                      padding: \"0 5px\",\n                    }}\n                    onClick={(event) => handleClick(artist, event)}\n                  >\n                    <div className=\"artistImage\">\n                      {artist.imageUrl && (\n                        <img\n                          src={`${process.env.REACT_APP_API_URL}/${artist.imageUrl}`}\n                          alt={artist.title}\n                          width=\"100%\"\n                        />\n                      )}\n                      <div className=\"artContent\">\n                        <h4 className=\"artTitle\">{artist.title}</h4>\n                      </div>\n                    </div>\n\n                    {/* Add heart icon here */}\n                    <div className=\"favoriteIcon\">\n                      <button\n                        onClick={(event) => {\n                          event.stopPropagation(); // Prevent the click event from bubbling up\n                          toggleFavorite(artist);\n                        }}\n                      >\n                        {isFavorite(artist) ? (\n                          <BsHeartFill className=\"favorited\" />\n                        ) : (\n                          <BsHeartFill className=\"heartIcon\" />\n                        )}\n                      </button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n              {showArrows[index]?.right && (\n                <button\n                  className=\"arrow right react-multiple-carousel__arrow\"\n                  onClick={() => scrollCarousel(1, index)} // Scroll right\n                >\n                  <BsChevronCompactRight />\n                </button>\n              )}\n            </section>\n          ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Musicians;\n"],"names":["gsap","registerPlugin","Draggable","_ref","onNavigate","categories","setCategories","useState","artistsByCategory","setArtistsByCategory","favorites","setFavorites","showArrows","setShowArrows","left","right","carouselRefs","useRef","loading","setLoading","useEffect","async","manualArtistOrder","Singers","DJ","Musicians","Trending","fetchedCategories","axios","get","data","fetchedArtists","filter","artist","isPublished","storedFavorites","JSON","parse","localStorage","getItem","shuffleArray","array","sort","Math","random","hasShuffled","sortedCategories","a","b","name","categoriesToShuffle","cat","find","setItem","groupedArtists","forEach","category","sortedArtists","map","isFavorite","some","fav","_id","indexOf","title","error","console","fetchData","current","length","updateArrowVisibility","carousel","index","scrollWidth","clientWidth","scrollLeft","prev","window","addEventListener","removeEventListener","innerWidth","killTweensOf","create","type","bounds","minX","maxX","inertia","throwProps","edgeResistance","onThrowUpdate","to","x","_gsap","ease","snap","value","round","scrollCarousel","direction","scrollAmount","scrollBy","behavior","setTimeout","_jsx","className","children","_showArrows$index","_artistsByCategory$ca","_showArrows$index2","_jsxs","id","onClick","BsChevronCompactLeft","ref","el","style","display","overflow","width","flex","boxSizing","padding","event","handleClick","imageUrl","src","alt","stopPropagation","savedFavorites","updatedFavorites","stringify","toggleFavorite","BsHeartFill","BsChevronCompactRight"],"sourceRoot":""}